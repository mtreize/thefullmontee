.card#current_totals
  .card-body
    .row
      -nb_losers=@players_total_scores.count< 5 ? 1 : 2
      -@players_total_scores.each_with_index do |(p,s),index|
        -mc="col "
        -mc+=" text-danger" if index<nb_losers
        =render :partial=>"player_current_total", :locals => {:mc => mc, :p=>p, :s=>s, :g=>@game}
%small.text-white.pull-right
  Encore  
  =@game.nb_rounds-@round.number+1
  manches à jouer
%br
%h3.text-white
  ="#{@round.number.to_s}ᵉ manche"
  =fa_icon "long-arrow-right"
  
  =" #{@game.nb_cards_for_round(@round.number)} carte#{"s" if @game.nb_cards_for_round(@round.number)>1}"
#editroundform
  =form_tag(game_save_round_path(@game.id, @round.number), :id=>"erf") do
    -@players.each do |p|
      .card.player_fieldset
        .card-body
          -if @round.previous
            %small.pull-right.text-muted.font-italic
              -prev_score=@round.previous.score_for_player(p).try(:value)
              ="(#{"+" if prev_score>0}#{prev_score})" unless prev_score.nil?
          %h4
            =p.name
    
          %div{"data-toggle" => "buttons"}
            .btn-group.btn-group-justified.score_selector.specialw
              -(1..6).each do |v|
                %label.btn.btn-info{:class=> "#{@players_score_for_this_round[p.id]==v ? "active" : ""}"}
                  -attr={:autocomplete => "off", :name => "players_scores[#{p.id}]", :type => "radio", :value => "#{v}"}
                  -attr["checked"]="checked" if @players_score_for_this_round[p.id]==v
                  -attr["class"]="tocheck" if @players_score_for_this_round[p.id]==v
                  %input{attr}/
                  ="#{"+" if v>0}"+v.to_s
            .btn-group.btn-group-justified.score_selector.specialw
              -(-3..-1).reverse_each do |v|
                %label.btn.btn-info{:class=> "#{@players_score_for_this_round[p.id]==v ? "active" : ""}"}
                  -attr={:autocomplete => "off", :name => "players_scores[#{p.id}]", :type => "radio", :value => "#{v}"}
                  -attr["checked"]="checked" if @players_score_for_this_round[p.id]==v
                  -attr["class"]="tocheck" if @players_score_for_this_round[p.id]==v
                  %input{attr}/
                  =v.to_s
              %label.btn.btn-info{:class=> "#{@players_score_for_this_round[p.id]==0 ? "active" : ""}"}
                -attr={:autocomplete => "off", :name => "players_scores[#{p.id}]", :type => "radio", :value => 0}
                -attr["checked"]="checked" if @players_score_for_this_round[p.id]==0
                -attr["class"]="tocheck" if @players_score_for_this_round[p.id]==0
                %input{attr}/
                out
              %button.otherbutton.btn.btn-info.dropdown-toggle{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button", :style=>"margin-bottom: .5rem;"}
                %span.other_display_value Autre
              .otherdd.dropdown-menu.dropdown-menu-right
                -(7..15).reverse_each do |ov|
                  %a.dropdown-item{:href => "#", "data-other-value"=>ov, "data-other-value-to-display"=>"+#{ov}"}="+#{ov}"
                .dropdown-divider
                -(-10..-4).reverse_each do |ov|
                  %a.dropdown-item{:href => "#", "data-other-value"=>ov, "data-other-value-to-display"=>"#{ov}"}="#{ov}"
              %input.otherinput{:autocomplete => "off", :name => "players_scores[#{p.id}]", :type => "radio", :value => 100, :style=>"display:none;"}
    .card
      .card-body
        .text-center
          =button_tag "Valider ce tour", :class=>"saveroundbtn btn btn-secondary btn-xl", :disabled=>"disabled", :type=>"submit", 'data-disable-with' => fa_icon("spinner spin 2x").html_safe
        %hr/
        =link_to "Annuler et modifier la manche précédente", game_edit_round_path(@game, @round.previous.number)   unless @round.previous.nil?
        
:javascript

  $(".tocheck").prop('checked', true);
  
 
  function checkScores(){
    condition_presence=false;
    condition_au_moins_un_echec=false;
    
    // CONDITION PRESENCE
    if($("#editroundform input[type='radio']:checked").length >= #{@players.count}){ 
      condition_presence=true;
    }
    
    //CONDITION AU MOINS UN ECHEC
    if($("#editroundform :input[type='radio']:checked").filter(function() {
            return parseInt($(this).val(), 10) < 0;
        }).length > 0){
      condition_au_moins_un_echec=true;
    }
    else if($("#editroundform input.otherinput[type='radio']:checked").filter(function() {
            return parseInt($(this).val(), 10) < 0;
        }).length > 0){
      condition_au_moins_un_echec=true;
    }
    
    if (condition_presence==true && condition_au_moins_un_echec==true){
      $(".saveroundbtn").attr( "class", "saveroundbtn btn btn-primary btn-xl" );
      $(".saveroundbtn").prop( "disabled", false );
    }
    else{
      $(".saveroundbtn").attr( "class", "saveroundbtn btn btn-secondary btn-xl" );
      $(".saveroundbtn").prop( "disabled", true );
    }
  }
  
  
  function selectOtherValue(e){
    var new_val_display=$(e.target).attr("data-other-value-to-display");
    var this_other_display=$(e.target.parentNode.parentNode).find(".other_display_value");
    var other_button=$(e.target.parentNode.parentNode).find("button")
    
    var new_val=$(e.target).attr("data-other-value");
    var other_parent_group_radios=$(e.target.parentNode.parentNode.parentNode).find(" :input[type='radio']");
    var other_parent_group_labels=$(e.target.parentNode.parentNode.parentNode).find("label");
    var other_input=$(e.target.parentNode.parentNode.parentNode).find(".otherinput");
    
    
    this_other_display.html(new_val_display);
    other_button.addClass("active");
    other_parent_group_labels.removeClass("active");
    other_parent_group_radios.prop('checked', false);
    other_input.val(new_val);
    other_input.prop('checked', true);
  }

  checkScores();
  $("#editroundform .btn :input").change(function (){checkScores()});
  

  $("#editroundform .otherdd a").click(function (e){
    selectOtherValue(e)
    checkScores();
  }); 